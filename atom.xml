<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Blog of Tyler Russell]]></title>
  <link href="http://terussell85.github.io/atom.xml" rel="self"/>
  <link href="http://terussell85.github.io/"/>
  <updated>2015-12-14T23:27:44-07:00</updated>
  <id>http://terussell85.github.io/</id>
  <author>
    <name><![CDATA[Tyler Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An Ng2 Timezone Picker - Part 2.3: The TimeZonePicker Component]]></title>
    <link href="http://terussell85.github.io/blog/2015/12/14/an-ng2-timezone-picker-part-2-dot-3-the-timezonepicker-component/"/>
    <updated>2015-12-14T22:11:04-07:00</updated>
    <id>http://terussell85.github.io/blog/2015/12/14/an-ng2-timezone-picker-part-2-dot-3-the-timezonepicker-component</id>
    <content type="html"><![CDATA[<p>Now that we have our basic project scaffolding in place, it&rsquo;s time for us to get started writing our components.</p>

<p>So let&rsquo;s open up our root component, the TimeZonePicker component (located in the timezonepicker.ts file).  So the first thing to remember is that with Angular2, we are writing TypeScript.  Lucky for us, the basics of TypeScript look pretty similiar to ES6 (or ES2015, or whatever it&rsquo;s called now).  So let&rsquo;s start off by defining a class.</p>

<figure class='code'><figcaption><span>timezonepicker.ts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">TimeZonePicker</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boom!  Done!  We&rsquo;ve got our TimeZonePicker class defined and exported.  Webpack refreshes our browser for us and&hellip;  yep we&rsquo;re good.  Alright, now let&rsquo;s make this a component.</p>

<p>First, we&rsquo;ll import the necessary Angular2 dependencies from the angular2 library.  Then, we&rsquo;ll use annotations to mark the class as an Angular2 component.</p>

<p>What are annotations, you ask?  I&rsquo;m glad you brought that up.  I tend to use the term &ldquo;annotations&rdquo; instead of &ldquo;decorators&rdquo; because of my background with other languages (Java specifically).  However, in many other languages, (including JavaScript) &ldquo;decorators&rdquo; is the correct term.  Either way, think of annotations/decorators as a way of specifying metadata about your code that can be used at compile or run time to modify behavior.  If you are interested in learning more, you can read the <a href="https://github.com/wycats/javascript-decorators">ES7 proposal for decorators</a>.</p>

<blockquote><p>Author Note:
As far as I can tell Typescript technically implements the ES7 decorator spec, so &ldquo;decorator&rdquo; is the right term in the context of JavaScript.  But old habits die hard.  So if you see me reference then as annotations, just smirk and move on.  In reality, there are a couple of <a href="http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html">differences between the two</a>, but for our purposes here, we don&rsquo;t really care.</p></blockquote>

<p>So let&rsquo;s add to our code!</p>

<figure class='code'><figcaption><span>timezonepicker.ts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">Component</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;angular2/angular2&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">selector</span><span class="o">:</span> <span class="s2">&quot;timezone-picker&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">template</span> <span class="o">:</span> <span class="err">`</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;picker&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="nx">This</span> <span class="nx">is</span> <span class="nx">our</span> <span class="nx">picker</span><span class="o">!</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">timezone</span><span class="o">-</span><span class="nx">map</span> <span class="p">(</span><span class="nx">change</span><span class="p">)</span><span class="o">=</span><span class="s2">&quot;onChange($event)&quot;</span> <span class="p">[</span><span class="nx">tz</span><span class="o">-</span><span class="nx">id</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;tzId&quot;</span><span class="o">&gt;&lt;</span><span class="err">/timezone-map&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="err">`</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">TimeZonePicker</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alright, now we getting into the fun stuff.  So let&rsquo;s take a quick look at that code.  A couple of important explanations:</p>

<ol>
<li>We import the Component decorator on line 1.  As we expand our component definition, we&rsquo;ll import more things from angular2</li>
<li>Line 3 has our <code>@Component</code> annotation</li>
<li>Line 4 specifies the selector for our component.  Most CSS2 selectors are supported here (excluding psuedo-selectors)</li>
<li>Line 5 begins our template definition.  Just like AngularJS, we can define the template inline, or provide a templateUrl.  With TypeScript though, we getting the added benefit of using  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings">ES6 template strings</a>.  A major improvement over concatenated strings!</li>
<li>Line 8 references our TimeZoneMap component, which doesn&rsquo;t exist yet.  That&rsquo;s fine.  The component just won&rsquo;t evaluate until it does.  Note that anything surrounded with <code>()</code> is considered an &ldquo;output&rdquo; of that component, and anything surrounded with <code>[]</code> is an input.  We&rsquo;ll see this again soon.</li>
</ol>


<p>To test our new component, let&rsquo;s make sure that it is rendered when we run our app.  Open up <code>app.ts</code> and let&rsquo;s modify a few things.</p>

<figure class='code'><figcaption><span>app.ts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">Component</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;angular2/angular2&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">TimeZonePicker</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;./timezonepicker/timezonepicker&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="err">`</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">Angular2</span><span class="o">!&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">timezone</span><span class="o">-</span><span class="nx">picker</span><span class="o">&gt;&lt;</span><span class="err">/timezone-picker&gt;</span>
</span><span class='line'>  <span class="err">`</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">directives</span><span class="o">:</span> <span class="p">[</span><span class="nx">TimeZonePicker</span><span class="p">]</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">App</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alright, let&rsquo;s talk about our changes.</p>

<ol>
<li>On line 2, we added a second import statement that imports our TimeZonePicker</li>
<li>On line 8, we modified the template to include an element that matches the TimeZonePicker selector</li>
<li>On line 10, we added a <code>directives</code> property to our <code>@Component</code> defintion.  Unlike AngularJS, Angular2 will not automatically evaluate all components/directives.  By explicitly listing what directives are used, Angular2 gets a major perf boost, since it doesn&rsquo;t have to check for all of them.</li>
</ol>


<p>And that&rsquo;s it for our code changes to <code>app.ts</code>!</p>

<p>While we have <code>app.ts</code> open though, let&rsquo;s do a fun experiment.  If you are using an IDE with built-in TypeScript/ES2015 support, try deleting line 2 and see what happens.  Here&rsquo;s what happens for me:</p>

<div style="text-align:center; margin-bottom:20px;">
    <img src="http://terussell85.github.io/images/timezone2-3/autocomplete.png">
</div>


<p>Wait.. is that&hellip; autocompletion of imports?!?  Having written ES5 for so long, I forgot what helpful front end autocomplete was.  Yes, I realize autocomplete exists for ES5.  And no, it&rsquo;s not normally very helpful.  Coding in TypeScript/ES2015, however, feels great.  Okay, end of tangent.</p>

<p>Let&rsquo;s fire up our app and see if everything worked.</p>

<div style="text-align:center; margin-bottom:20px;">
    <img src="http://terussell85.github.io/images/timezone2-3/result.png">
</div>


<p>And that looks pretty good!  We see our &ldquo;This is our picker!&rdquo; text, and the DOM shows that our template has been rendered correctly.  We&rsquo;ve built the first component of our picker!  Success!</p>

<p>In our next post, we&rsquo;ll give the TimeZoneMap component and TimeZone directive the same treatment as our TimeZonePicker.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Ng2 Timezone Picker - Part 2.2: Scaffolding]]></title>
    <link href="http://terussell85.github.io/blog/2015/12/14/an-ng2-timezone-picker-part-2-dot-2-scaffolding/"/>
    <updated>2015-12-14T13:02:12-07:00</updated>
    <id>http://terussell85.github.io/blog/2015/12/14/an-ng2-timezone-picker-part-2-dot-2-scaffolding</id>
    <content type="html"><![CDATA[<p>In this post, we&rsquo;ll get the scaffolding of our project setup.</p>

<p>Our timezone picker will consist of four different components/directives.</p>

<ol>
<li>App &ndash; the entry point into our Angular2 application</li>
<li>TimeZonePicker &ndash; the root component for our time zone picker</li>
<li>TimeZoneMap &ndash; the component that renders our SVG map</li>
<li>TimeZone &ndash; the directive that maps SVG elements to classes with attributes</li>
</ol>


<p>By default, our project structure from the seed project looks like so:</p>

<div style="text-align:center; margin-bottom:20px;">
  <img src="http://terussell85.github.io/images/timezone2-2/project_base.png">
</div>


<p>Let&rsquo;s add a bit of scaffolding and some placholder files so that we can flesh out our components in the future.</p>

<ol>
<li>Create the <code>src/components/timezone</code> directory</li>
<li>Create the <code>src/components/timezonemap</code> directory</li>
<li>Create the <code>src/components/timezonepicker</code> directory</li>
<li>Create the <code>src/assets</code> directory</li>
<li>In <code>src/components/timezone</code>, create <code>timezone.ts</code></li>
<li>In <code>src/components/timezonemap</code>, create <code>timezonemap.ts</code></li>
<li>In <code>src/components/timezonepicker</code>, create <code>timezonepicker.ts</code></li>
<li>In <code>src/assets</code>, create <code>styles.css</code></li>
<li>In <code>src/assets</code>, copy in the output map from our Kartograph.py script</li>
</ol>


<p>In case you need them, here are the commands for steps 1-8.  Step 9 you&rsquo;ll still need to do by hand.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir src/app/components/timezone
</span><span class='line'>mkdir src/app/components/timezonemap
</span><span class='line'>mkdir src/app/components/timezonepicker
</span><span class='line'>mkdir src/assets
</span><span class='line'>touch src/app/components/timezone/timezone.ts
</span><span class='line'>touch src/app/components/timezonemap/timezonemap.ts
</span><span class='line'>touch src/app/components/timezonepicker/timezonepicker.ts
</span><span class='line'>touch src/assets/styles.css
</span></code></pre></td></tr></table></div></figure>


<p>Once setup, our project structure should look like this:</p>

<div style="text-align:center; margin-bottom:20px;">
    <img src="http://terussell85.github.io/images/timezone2-2/project_with_files.png">
</div>


<p>In the next part of our series, we will start to write our Angular2 components.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Ng2 Timezone Picker - Part 2.1: The Environment]]></title>
    <link href="http://terussell85.github.io/blog/2015/12/13/an-ng2-timezone-picker-part-2-dot-1-the-environment/"/>
    <updated>2015-12-13T23:25:18-07:00</updated>
    <id>http://terussell85.github.io/blog/2015/12/13/an-ng2-timezone-picker-part-2-dot-1-the-environment</id>
    <content type="html"><![CDATA[<p>First things first, we are going to get our Angular2 project environment setup.  Feel free to use your favorite IDE or text editor for this series.  I&rsquo;ll be using Webstorm because I&rsquo;m a fake developer that doesn&rsquo;t understand VIM key bindings.</p>

<p>The starting point for our our timezone picker is going to be the <a href="https://github.com/angular/angular2-seed">angular2-seed</a> project found in the official angular repository.  I&rsquo;m a big fan of reusing what&rsquo;s there.  Plus, this saves us from rewriting a bunch of boilerplate.</p>

<h4>Getting the seed setup</h4>

<p>Once you have node.js installed, just clone the <a href="https://github.com/angular/angular2-seed">angular2-seed</a> repository and run <code>npm install</code> to get setup.  If needed, use the steps below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#go to your source dir</span>
</span><span class='line'><span class="nb">cd</span> /my_cool_source_dir
</span><span class='line'>
</span><span class='line'><span class="c">#clone the seed project</span>
</span><span class='line'>git clone https://github.com/angular/angular2-seed ng2timezonepicker
</span><span class='line'>
</span><span class='line'><span class="c">#go into the seed directory</span>
</span><span class='line'><span class="nb">cd </span>ng2timezonepicker
</span><span class='line'>
</span><span class='line'><span class="c">#install dependencies</span>
</span><span class='line'>npm install
</span></code></pre></td></tr></table></div></figure>


<p>The angular2-seed project provides us with a good starting point for our timezonepicker.  It comes preconfigured with the following technologies:</p>

<ol>
<li><a href="https://angular.io/">Angular2</a> for building awesome web stuff</li>
<li><a href="https://webpack.github.io/">Webpack</a> for module bundling</li>
<li><a href="http://www.typescriptlang.org/">TypeScript compiler</a> for typed Javascript (and more)</li>
<li>Associated Node packages</li>
</ol>


<p>If you aren&rsquo;t familiar with Webpack or Typescript, don&rsquo;t fret too much.  A deep knowledge of Webpack will not be needed for this series.  However, it&rsquo;s becoming quite prevelant in the JS community, so you should probably dedicate some time to it in the future.</p>

<p>If you&rsquo;ve never used TypeScript before, you&rsquo;re not alone.  We won&rsquo;t use most of the language features in this series.  And the ones we do, I&rsquo;ll try and explain.  However, if you see something that looks unfamiliar, go ahead and head over to the <a href="http://www.typescriptlang.org/">TypeScript</a> site to see what&rsquo;s up.</p>

<h4>Running the project</h4>

<p>The <code>package.json</code> file also has the <code>npm start</code> command configured to run the <a href="https://webpack.github.io/docs/webpack-dev-server.html">webpack-dev-server</a> on port 8080.  So once you&rsquo;ve got everything setup, run <code>npm start</code> and open your browser to localhost:8080.  We&rsquo;re ready to get coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Angular2 Timezone Picker - Part 2: Exploring the World (of ng2)]]></title>
    <link href="http://terussell85.github.io/blog/2015/04/21/building-an-angular2-timezone-picker-part-2/"/>
    <updated>2015-04-21T23:22:28-06:00</updated>
    <id>http://terussell85.github.io/blog/2015/04/21/building-an-angular2-timezone-picker-part-2</id>
    <content type="html"><![CDATA[<h3>Important Notice:</h3>

<p>This article was originally posted on April 21, 2015.  However, it quickly became irrelevant with major core changes to the Angular2 framework.</p>

<p>Now that the Angular2 codebase has calmed significantly, this article has been rewritten to reflect the current state of things.</p>

<h4>Posts for the time-deprived</h4>

<p>In the process of rewriting this blog post, I decided to try a new blogging style.  Instead of my standard lengthy multi-page posts, I&rsquo;m going to try and write smaller bite-sized posts that are easier to consume in small chunks.  In that spirit, you can find each of the subparts of this post listed below.</p>

<p>Subparts will be added to this list as they are written.</p>

<ol>
<li><a href="http://terussell85.github.io/blog/2015/12/13/an-ng2-timezone-picker-part-2-dot-1-the-environment/">Setting Up Our Ng2 Environment</a></li>
<li><a href="http://terussell85.github.io/blog/2015/12/14/an-ng2-timezone-picker-part-2-dot-2-scaffolding/">Project Scaffolding</a></li>
<li><a href="http://terussell85.github.io/blog/2015/12/14/an-ng2-timezone-picker-part-2-dot-3-the-timezonepicker-component/">The TimeZonePicker Component</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Angular2 Timezone Picker - Part 1: Becoming a Kartograph-er]]></title>
    <link href="http://terussell85.github.io/blog/2015/04/01/building-an-angularjs-timezone-picker-part-1/"/>
    <updated>2015-04-01T21:09:07-06:00</updated>
    <id>http://terussell85.github.io/blog/2015/04/01/building-an-angularjs-timezone-picker-part-1</id>
    <content type="html"><![CDATA[<h3>TLDR</h3>

<p>We design an SVG map to serve as the basis of our Angular2 timezone picker.</p>

<p>Using Kartograph, we generate a viable map candidate using shape file obtained from the <a href="http://efele.net/maps/tz/world/">tz_world database</a> and <a href="http://www.naturalearthdata.com">Natural Earth Data</a>.</p>

<p>We optimize the map using Kartograph configurations in order to cut down size and add attribution.</p>

<h3>Introduction</h3>

<p>In this multi-part series, we&rsquo;ll be going through the process of building a timezone picker from scratch.  We&rsquo;ll talk through possible solutions and why we choose one route or the other.</p>

<p><strong>Disclosure:</strong> I am not an Angular2 expert.  At this point, I&rsquo;m not sure anyone is.  We&rsquo;ll be learning together as we go through this process.</p>

<p><strong>Disclosure 2:</strong> The first part of this series documents how to build the map for the component.  Subsequent posts will document the process of building the Angular2 code.  If you only care about Angular2, feel free to skip this and come back for the next.</p>

<h3>The Goal</h3>

<p>To keep this post as close to real life as possible, let assume we have no clue what we want to build (this has <em>never</em> happened to me, I promise). So let&rsquo;s just find a reliable implementation to copy.  The OSX timezone picker should work.</p>

<p><img src="http://terussell85.github.io/images/timezone/osx_picker.jpg" title="Yup.  We are going to copy this" alt="alt text" /></p>

<p>I fully acknowledge that I do not own copyrights to this picker, so we will get close to this, but not too close.  For the sake of simplicity we won&rsquo;t get into a full design spec.  But here is a short list of what we are aiming to accomplish:</p>

<ul>
<li>Map of the world continents (excluding Antarctica), shaded and filled</li>
<li>Highlight the timezone offset (not the timezone) on click</li>
<li>Display the name of the time zone that was clicked</li>
</ul>


<p>Bonus items:</p>

<ul>
<li>City lookup and reverse geo-coding (if you don&rsquo;t mind a server component)</li>
<li>Size independent</li>
<li>As small (kb-wise) as possible</li>
<li>As few external dependencies as possible (preferably none)</li>
</ul>


<p>Because this is quite the list of features, we&rsquo;ll implement it in phases.  For some of the trickier features, we&rsquo;ll hopefully be able to get by without a server.  We&rsquo;ll have to wait and see.  For phase 1, we&rsquo;ll simply allow for the selection of specific time zones.  In phase 2, we&rsquo;ll extend it to city searching by reverse-geocoding.</p>

<p><strong>Note:</strong> Our first instinct might be to check if someone else has done this for us already.  Great!  A quick good search reveals a few AngularJs pickers that already do much of what we want.  Luckily for us, none are in Angular2 (yet!)  Either way, that&rsquo;s no fun!  We need to do it ourselves.  If we didn&rsquo;t write it, it&rsquo;s crap.</p>

<h3>Our Custom Map</h3>

<p>First things first, let&rsquo;s get a map on which we can base our picker.  Building a viable SVG map will be the primary focus of this post.  To do so, we are going to use a nice set of Python scripts called <a href="http://kartograph.org/">Kartograph</a>.</p>

<p>Kartograph actually has two parts, Kartograph.py and Kartograph.js.  Kartograph.py is a Python library used to generate SVGs from GIS shape files.  Kartograph.js is a javascript library for displaying and manipulating Kartograph.py maps in the browser.  It does a great job, but in our case, we don&rsquo;t need to incur the cost of the extra library, so we won&rsquo;t use it.  So we&rsquo;ll just use Kartograph.py to generate ourselves a nice SVG.</p>

<p>A valid question at this point may be &ldquo;Why incur the cost of an SVG when an image will do just fine?&rdquo;.  Great question.  We&rsquo;ll see some good reasons in the future as we implement more features, but let&rsquo;s just say that we want the ultimate flexibilty.  Our component should be able to allow the selection of time zones in any bounded geographic area, not just for a hard-coded map.  Building our component around SVGs generated by Kartograph helps ensure users will be able to generate and use their own custom maps.</p>

<p>Other great reasons:</p>

<ul>
<li>Different Projections</li>
<li>User styling</li>
<li>Attribution</li>
</ul>


<p><strong>Tangent:</strong> I had a roommate in college who studied <a href="http://en.wikipedia.org/wiki/Geographic_information_system">GIS</a> and I never even realized how cool it was.  GIS deals with some interesting problems. Starting this component, I bet you didn&rsquo;t realize you&rsquo;d be learning GIS shape files, map projections, and reverse geo-coding.</p>

<h3>The Map Shapes</h3>

<p>If you haven&rsquo;t installed Kartograph.py.  Go ahead and <a href="http://kartograph.org/docs/kartograph.py/">do it now</a>.  You&rsquo;ll need it for this part.</p>

<p>To kick things off, we&rsquo;ll need some great shape (.shp) files to serve as the base for our map.  Like usual, the open source community saves us here.  For our picker, these are the shape files we will need:</p>

<ul>
<li><a href="http://www.naturalearthdata.com/downloads/50m-physical-vectors/50m-land/">Land Outlines &ndash; Natural Earth Data</a></li>
<li><a href="http://efele.net/maps/tz/world/">Timezone Boundaries &ndash; tz-world</a></li>
<li><a href="http://www.naturalearthdata.com/downloads/10m-cultural-vectors/timezones/">Timezone offsets &ndash; Natural Earth Data</a></li>
</ul>


<p>For phase 1, we&rsquo;ll only be using the first 2.  But if you&rsquo;re going to be around for the whole series, go ahead and download the last one as well.</p>

<p>If you want a free application that can view the .shp files before we turn them into SVGs, check out <a href="http://www.qgis.org/en/site/">QGIS</a>.</p>

<h3>Generating Our Map</h3>

<p>Alright, now for a crash course in using Kartograph.py.  In it&rsquo;s simplest form, Kartograph runs as a command line utility that accepts a configuration JSON file and generates an output SVG.  The configuration files can include many different settings.  Read the <a href="http://kartograph.org/docs/kartograph.py/">docs</a> to see them all.  We will use a subset while generating our map.</p>

<p>So let&rsquo;s take a first stab at a configuration file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;layers&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;land&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/ne_110m_land.shp&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&quot;timezones&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/tz_world.shp&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;proj&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;lonlat&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This configuration specifies that we want 2 layers.  The &ldquo;land&rdquo; layer will come from the ne_110m_land.shp files, and the &ldquo;timezones&rdquo; layer will come from tz_world.shp.  We also specify the map projection to be &ldquo;lonlat&rdquo;.</p>

<p>You can think of <a href="http://en.wikipedia.org/wiki/Map_projection">map projections</a> as consistent ways of mapping the spherical latitude and longitude measurements to a 2d plane.  If that peaks your interest at all, read through the wiki page.  It&rsquo;s another interesting area of GIS.  The &ldquo;lonlat&rdquo; projection we are using is a linear interpolation algorithm that will make extracting lat/lng from our map much simpler when we implement reverse-geocoding.</p>

<p>So now that we have our configuration file setup,  we run Kartograph, and get our output SVG.  Let&rsquo;s open it up and take a look.  It looks great!  We&rsquo;ve got our continent outlines overlaid by our timezone outlines.  Perfect.</p>

<div style="text-align:center; margin-bottom:20px;">
  <img src="http://terussell85.github.io/images/timezone/step1_map.jpg">
</div>


<p>So I guess we&rsquo;re done!  Ship it!  Okay, not so fast.  That sure took a while to load and render in Chrome when I opened it.  What&rsquo;s going on?  Uh oh.  Finder adds some insight&hellip;</p>

<div style="text-align:center; margin-bottom:20px;">
    <img src="http://terussell85.github.io/images/timezone/step1_output.jpg" style="height: 250px">
</div>


<p>Ouch!  46 megs?!?  It&rsquo;s large enough the OSX won&rsquo;t even render a preview image.  That might work for my good friends down in Provo that run Google Fiber, but I&rsquo;m not so lucky.  Let&rsquo;s see what we can do to shrink it.</p>

<p>Taking a quick glance at the SVG code in an editor seems to indicate that the file size is due to the shear number of points necessary to represent each time zone boundary.  In other words, our SVG is simply too complex.  We have two options, eliminate shapes or simplify the geometry.  We&rsquo;ll try both.</p>

<h3>Optimizing For Size &ndash; Eliminate Shapes</h3>

<p>Scouring through the Kartograph docs, I noticed that there is a <a href="http://kartograph.org/docs/kartograph.py/#filtering-map-features">&ldquo;filter&rdquo; option</a> that can be used in our configuration to conditionally include geometries.  That seems to fit the ticket.  But what do we filter on?  Let&rsquo;s fire up QGIS and take a look.  Selecting a shape in tz_world shows us the attributes.</p>

<div style="text-align:center; margin-bottom:20px;">
    <img src="http://terussell85.github.io/images/timezone/attributes.jpg" style="height: 250px">
</div>


<p>There isn&rsquo;t much here, but we can make it work.  It seems like a good compromise would be to filter out extremely small time zones, as the likelihood of the user being able to even click those zones on the map is minuscule.  That may be upsetting for users in those specific time zones, but remember that this is phase 1.  If we want support for all possible time zones, we can address it in phase 2.  So lets change our configuration to filter out anything less than 3 sq km.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;layers&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;land&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/ne_110m_land.shp&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&quot;timezones&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/tz_world.shp&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;filter&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;AREA&quot;</span><span class="p">,</span> <span class="s2">&quot;greater&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;proj&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;lonlat&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result?  29.5 megs.  That&rsquo;s a pretty good decrease, but obviously still not good enough.  Let&rsquo;s take a look at our second option, simplifying the geometry.</p>

<h3>Optimizing For Size &ndash; Simplify Geometry</h3>

<p>The tz_world shape file has a pretty high resolution for it&rsquo;s boundary accuracy.  We definitely don&rsquo;t need that much accuracy on a map that is likely to be render at less than 1024px wide.  If we were printing a classroom map, maybe, but not for our purposes here.  We need a way to simplify the geometry without having to modify our shape files by hand.  Luckily, Kartograph can do <a href="http://kartograph.org/docs/kartograph.py/#simplifying-map-features">just that</a>.</p>

<p>By the way, put <a href="http://bost.ocks.org/mike/simplify/">Visvalingam’s algorithm</a> (how the simplification works) on the list of &ldquo;GIS things I didn&rsquo;t know existed that were created by very smart people&rdquo;.</p>

<p>Let&rsquo;s add the simplify option to our shape file layers.  The ne_110m_land.shp file already has 110m resolution, so we only need basic simplification there.  The tz_world layer, however, can do for a bit more.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;layers&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;land&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/ne_110m_land.shp&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;simplify&quot;</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&quot;timezones&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/tz_world.shp&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;filter&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;AREA&quot;</span><span class="p">,</span> <span class="s2">&quot;greater&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class='line'>          <span class="nt">&quot;simplify&quot;</span> <span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;proj&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;lonlat&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;re making real progress.  214 KB and the SVG still looks great.  Looks like simplification was the ticket.  However, we can still probably eek out a few more bytes.</p>

<h3>Optimizing For Size &ndash; Rounding for a few more bytes</h3>

<p>Examining the SVG code, you might notice that our paths are using very precise numbers for their points.  If we rounded the precision to the hundreth, we could probably shave a few more bytes without really affecting the shape of the geometry.  What&rsquo;s that?  Kartograph has the <a href="http://kartograph.org/docs/kartograph.py/#round-coordinates">round option</a>?  Let&rsquo;s plug it in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;layers&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;land&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/ne_110m_land.shp&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;simplify&quot;</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&quot;timezones&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/tz_world.shp&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;filter&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;AREA&quot;</span><span class="p">,</span> <span class="s2">&quot;greater&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class='line'>          <span class="nt">&quot;simplify&quot;</span> <span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;proj&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;lonlat&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;export&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="nt">&quot;round&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perfect!  After all of our optimization, now we&rsquo;re down to a respectable 118 KB.  Much better.  But what is that monstrosity on the bottom of our map?  I&rsquo;m going to go ahead and make the assumption that if OSX doesn&rsquo;t include Antarctica on their map, we&rsquo;re safe to exclude it as well.  Now, we could just add another filter that explicitly excludes Antarctica from our SVG, but for learning sake, let&rsquo;s use bounding to do it instead.  <a href="http://kartograph.org/docs/kartograph.py/#framing-the-map">Bounds</a> allow us to specify the portion of the shape files that we actually want included in our SVG map.</p>

<h3>Optimizing Bounds</h3>

<p>In our case, we&rsquo;ll just be trimming off some of the southern hemisphere.  However, you could use this to isolate specific areas of the world for you own map.  And best of all, Kartograph includes metadata in the SVG that can be used to determine the lat/lng boundaries of the current map!  We&rsquo;ll be able to use this in phase 2 for simple lat/lng lookup based on mouse click location.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;layers&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;land&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/ne_110m_land.shp&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;simplify&quot;</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&quot;timezones&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/tz_world.shp&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;filter&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;AREA&quot;</span><span class="p">,</span> <span class="s2">&quot;greater&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class='line'>          <span class="nt">&quot;simplify&quot;</span> <span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;proj&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;lonlat&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;export&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="nt">&quot;round&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;bounds&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;mode&quot;</span><span class="p">:</span> <span class="s2">&quot;bbox&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">-180</span><span class="p">,</span> <span class="mi">-60</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">90</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Overall, we&rsquo;re now down to 113 KB.  Gzipped, we&rsquo;re looking at 37 KB.  We&rsquo;re in JPG territory now, which is good enough for me.  We might be able to eek out a few more bytes, but we&rsquo;re probably at the point of diminishing returns.  Plus, 37KB is already so much more manageable than 46 megs.</p>

<div style="text-align:center; margin-bottom:20px;">
  <img src="http://terussell85.github.io/images/timezone/step5_output.jpg" style="height: 250px">
</div>


<p>Our map looks much simpler now, and that is good.  Once we style it, we&rsquo;ll have a nice clean starting point for our component.</p>

<h3>Adding Timezone Attribution</h3>

<p>After all of our changes, however, we need to add one more configuration to our map before we finish.  For easy lookup, we need to know the Olson code of the timezone that the user is clicking.  Without doing a lat/lng lookup into a timezone database (we&rsquo;ll get to that in later phases), the easiest way to allow this is to add the attribute to each time zone SVG path.</p>

<p>Luckily, as was observed previously, our tz_world shape file has the Olson code as an attribute on each time zone shape.  So let&rsquo;s tweak our configuration to have Kartograph maintain that attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;layers&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;land&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/ne_110m_land.shp&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;simplify&quot;</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&quot;timezones&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;src&quot;</span> <span class="p">:</span> <span class="s2">&quot;srcs/tz_world.shp&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;filter&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;AREA&quot;</span><span class="p">,</span> <span class="s2">&quot;greater&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class='line'>          <span class="nt">&quot;simplify&quot;</span> <span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;attributes&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="nt">&quot;tz_id&quot;</span><span class="p">:</span> <span class="s2">&quot;TZID&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;proj&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;lonlat&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;export&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="nt">&quot;round&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;bounds&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;mode&quot;</span><span class="p">:</span> <span class="s2">&quot;bbox&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">-180</span><span class="p">,</span> <span class="mi">-60</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">90</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whew!  We made it!  We&rsquo;ve got an SVG that can serve as the starting point for our phase 1 implementation.  With the metadata we added, it increased the size just a bit, but it still clocks in at 39Kb gzipped.  Not bad.  In the next post, we&rsquo;ll style the SVG, and get our Angular2 component up and running.</p>

<p><strong>Spoiler Alert</strong> With reverse-geocoding, we won&rsquo;t actually need the tz-world layer, which turns out to be the heaviest of the layers.  We&rsquo;ll be able to cut this SVG down in phase 2.  So our SVG is likely to end up even smaller.</p>

<h3>Conclusion</h3>

<p>In the first part of our timezone picker series, we&rsquo;ve started the process towards our amazing Angular2 timezone picker by using Kartograph to generate an SVG map.  We optimized the size of the map by eliminating unnecessary geometry and simplifying preserved geometry.  We also added attribution to time zone for ease of timezone lookup.</p>

<p>In the next entry, we&rsquo;ll style our SVG make and write the Angular2 code to wire up the behaviors we want.</p>

<p>In future entries, we&rsquo;ll expand our implementation to phase 2, reverse-geocoding and city lookup.</p>

<p>Thanks for reading!  Follow on Twitter for subsequent posts.</p>

<p>&mdash;T</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The AngularJs Promise Anti-Pattern That Makes Me Cry]]></title>
    <link href="http://terussell85.github.io/blog/2013/12/23/the-angularjs-promise-anti-pattern-that-makes-me-cry/"/>
    <updated>2013-12-23T11:57:37-07:00</updated>
    <id>http://terussell85.github.io/blog/2013/12/23/the-angularjs-promise-anti-pattern-that-makes-me-cry</id>
    <content type="html"><![CDATA[<h3>TLDR</h3>

<ul>
<li>Try to wrap any promise work in services.  Rarely should controllers do anything but consume promises.</li>
<li>Expose promises as return values of service calls instead of forcing callbacks as parameters.  This allows for multiple callbacks. (and much simpler code)</li>
<li>Setup callbacks as behaviors instead of global &ldquo;success&rdquo; or &ldquo;failure&rdquo;.  This allows for much easier chaining if necessary</li>
</ul>


<h3>The anti-pattern</h3>

<p>Asynchronous interactions in AngularJs are built on promises.  A <a href="http://andyshora.com/promises-angularjs-explained-as-cartoon.html">lot</a> <a href="http://markdalgleish.com/2013/06/using-promises-in-angularjs-views/">has</a> <a href="http://johnmunsch.com/2013/07/17/angularjs-services-and-promises/">been</a> <a href="https://egghead.io/lessons/angularjs-promises">said</a> on the subject of promises already.  So I won&rsquo;t cover their purpose extensively here.  Long story short, use them.</p>

<p>Sadly enough, the reasons for using promises are still widely misunderstood.  One pattern, in particular, I still see quite often with new users of promises.  I don&rsquo;t have a cool name for it, but if I did, it would be: &ldquo;The AngularJs promise anti-pattern that makes me cry.&rdquo;  But that&rsquo;s just because I&rsquo;m over-dramatic.</p>

<p>In general, I&rsquo;ve seen this pattern in the following form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">caller</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">callee</span><span class="p">({},</span> <span class="kd">function</span><span class="p">(){},</span> <span class="kd">function</span><span class="p">(){});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">callee</span><span class="p">(</span><span class="nx">toSave</span><span class="p">,</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">failure</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/place&quot;</span><span class="p">,</span> <span class="nx">toSave</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">promise</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">successData</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">success</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">success</span><span class="p">(</span><span class="nx">successData</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">failure</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">errorData</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">failure</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">failure</span><span class="p">(</span><span class="nx">errorData</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So before I start a flame war on this one, I&rsquo;ll go ahead and say nothing is &ldquo;wrong&rdquo; with this code.  In some cases I would even argue that it is perfectly acceptable.  You can see that we are trying to separate concerns, abstract callbacks, and keep things as clean as possible.  However, using promises this way eliminates many of the reasons that promises exist in the first place.  How so?  Let&rsquo;s step through a scenario.</p>

<h3>Our initial code</h3>

<p>Let&rsquo;s say that we are working along one day, listening to our favorite Pandora station when our project manager comes and taps us on the shoulder.  &ldquo;We need a page that saves an item and then moves on to another page.&rdquo;, he says.  No problem.  Being savvy programmers (with little time), we whip up the following controller and service in a few minutes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Page controller</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;app&quot;</span><span class="p">).</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;testCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">test</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Responds to click events on the save button</span>
</span><span class='line'><span class="cm">   * Saves the items and advances to the next page if successful</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">onSaveClick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">saveItem</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">,</span>
</span><span class='line'>      <span class="c1">//success callback</span>
</span><span class='line'>      <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s2">&quot;red&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//go to next page</span>
</span><span class='line'>        <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/place1&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="c1">//error callback</span>
</span><span class='line'>      <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="c1">//go to next page</span>
</span><span class='line'>        <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/place2&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Helper service</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;app&quot;</span><span class="p">).</span><span class="nx">service</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">saveItem</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">fail</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/item&quot;</span><span class="p">,</span> <span class="nx">item</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//wrap the callback in another callback, because that&#39;s the cool way</span>
</span><span class='line'>    <span class="nx">promise</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">itemData</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">success</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">success</span><span class="p">(</span><span class="nx">itemData</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//do it a different way here.  Because two ways is always better than one!</span>
</span><span class='line'>    <span class="nx">promise</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">fail</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">saveItem</span> <span class="o">:</span> <span class="nx">saveItem</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>And voila, a page that saves an item on button click.  It works as designed.  I&rsquo;m sure quite a few readers threw up in their mouths reading that code (I almost did as I wrote it).  We could easily point out a number of issues already with the way this is designed, but that&rsquo;s not the point of this exercise.  Let&rsquo;s step through piece by piece and see why this is bad.  Plus, I&rsquo;m still surprised how often I will go back and read my own code and find designs like this.  We all have bad days.</p>

<h3>Exposing the issues: Changing requirements</h3>

<p>Let&rsquo;s say that our project manager comes back and decides that the requirements have changed.  &ldquo;Customers are complaining about getting lost,&rdquo; he says.  &ldquo;We need to add a second button that saves the item but stays on the same page. We need to support both buttons.&rdquo;</p>

<p>Great, no problem.  We&rsquo;ll just make some minor tweaks to our controller to support this functionality.  We take a step back and look at our code.  Lets look at our plan of attack.</p>

<ul>
<li>Another event handler for &ldquo;update in place&rdquo; button clicks.</li>
<li>both handlers call the same save code.</li>
<li>only the first save should route to another page</li>
<li>both error callbacks do the same thing</li>
</ul>


<p>So we take a first stab at it.  And after a few iterations of refactoring, come out with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Page controller</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;app&quot;</span><span class="p">).</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;testCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">test</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">commonUiLogic</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s2">&quot;red&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">onSaveClick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">saveItem</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">commonUiLogic</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">//go to next page</span>
</span><span class='line'>      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/place1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">//go to next page</span>
</span><span class='line'>      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/place2&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">onUpdateInPlace</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">saveItem</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">,</span> <span class="nx">commonUiLogic</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">//go to next page</span>
</span><span class='line'>      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/place2&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//service left out for brevity</span>
</span></code></pre></td></tr></table></div></figure>


<p>All things considered, not too bad.  We have a &ldquo;commonUiLogic&rdquo; method that updates our UI for us in both cases.  We call the same service method for saving on both updates.  We are coding masters.</p>

<h3>Starting to feel the pain: Even more changing requirements</h3>

<p>But then it happens, our project manager comes over and tells us the requirements have changed again.  &ldquo;Red is too powerful.  We need more blue.  We need another button that saves, turns the text blue, and then goes to the next page&rdquo;.  Oh boy.  K.  Let&rsquo;s try this out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;app&quot;</span><span class="p">).</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;testCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">test</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">commonUiLogic</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s2">&quot;red&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">turnTextBlue</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">textColor</span> <span class="o">=</span> <span class="s2">&quot;blue&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">onSaveClick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">saveItem</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">commonUiLogic</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">//go to next page</span>
</span><span class='line'>      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/place1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">//go to next page</span>
</span><span class='line'>      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/place2&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">onUpdateInPlace</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">saveItem</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">,</span> <span class="nx">commonUiLogic</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">//go to next page</span>
</span><span class='line'>      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/place2&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">anotherButton</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">saveItem</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">commonUiLogic</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">turnTextBlue</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">//go to next page</span>
</span><span class='line'>      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/place2&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//service left out for brevity</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alright, that was a relatively simple addition.  But we are beginning to see how these callbacks can quickly get out of hand.  Every new difference can cause pretty large refactoring, and it isn&rsquo;t as easy to share common code as it should be.</p>

<h3>There must be a better way</h3>

<p>So let&rsquo;s take a step back.  What if we had been a bit smarter in our original design of our controller and service.  Could we have made this implementation even simpler?  For brevity&rsquo;s sake, lets just jump to the final refactor on this one.  We need three buttons, changing background colors, changing font colors, and fancy routing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Page controller</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;app&quot;</span><span class="p">).</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;testCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">test</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">goToPlace1</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">//go to next page</span>
</span><span class='line'>    <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/place1&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">changeBackgroundToRed</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s2">&quot;red&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">changeTextToBlue</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s2">&quot;blue&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">goToPlace2</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">//go to next page</span>
</span><span class='line'>    <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/place2&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">onSaveClick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">saveItem</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">changeBackgroundToRed</span><span class="p">)</span>
</span><span class='line'>                                   <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">goToPlace1</span><span class="p">)</span>
</span><span class='line'>                                   <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">goToPlace2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">onUpdateInPlace</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">saveItem</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">changeBackgroundToRed</span><span class="p">)</span>
</span><span class='line'>                                   <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">goToPlace2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">anotherButton</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">saveItem</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">changeTextToBlue</span><span class="p">)</span>
</span><span class='line'>                                   <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">goToPlace1</span><span class="p">)</span>
</span><span class='line'>                                   <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">goToPlace2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Helper service</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;app&quot;</span><span class="p">).</span><span class="nx">service</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">saveItem</span><span class="p">(</span><span class="nx">item</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/item&quot;</span><span class="p">,</span> <span class="nx">item</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">saveItem</span> <span class="o">:</span> <span class="nx">saveItem</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awww.  That&rsquo;s better.  Don&rsquo;t you feel lighter and happier?</p>

<p>Let&rsquo;s note the major differences in this original implementation.  First, the service now returns the promise directly, instead of wrapping it by passing in the success and failure callbacks.  We no longer have inline functions as callbacks.  In fact, we don&rsquo;t even categorize callbacks as &ldquo;success&rdquo; or &ldquo;failure.&rdquo;  Instead, they are behaviorally specified.  That way, we can chain each behavior in different combinations in order to get the deserved result per save request.  Overall, the readability of the code is greatly improved.  And with concise behavioral callbacks, unit testing will be a breeze.</p>

<h3>Minor changes, big impact</h3>

<p>The differences between the two implementations are subtle, and in many cases won&rsquo;t matter unless you are the third or fourth developer working in the codebase.  But in summary, some best practices around using promises include:</p>

<ul>
<li>Try to wrap any promise work in services.  Rarely should controllers do anything but consume promises.</li>
<li>Expose promises as return values of service calls instead of forcing callbacks.  This allows for multiple callbacks.</li>
<li>Setup callbacks as behaviors instead of global &ldquo;success&rdquo; or &ldquo;failure&rdquo;.  This allows for much easier chaining if necessary</li>
</ul>


<p>&mdash;T</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A blog]]></title>
    <link href="http://terussell85.github.io/blog/2013/12/07/a-blog/"/>
    <updated>2013-12-07T13:00:10-07:00</updated>
    <id>http://terussell85.github.io/blog/2013/12/07/a-blog</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve never really had a good online personal presence.  I had a couple of blogs in college and high school, but most of the subject matter revolved around weird life events.  Hardly what I&rsquo;d call a &ldquo;professional&rdquo; presence.  Now, working at <a href="http://www.domo.com">Domo</a>, I work with a ton of amazing people.  Most of them have pretty substantial credibility.  They inspired me to get my presence known and out there.</p>

<p>This blog will serve as a dumping point for my day-to-day adventures, as well as fun tidbits I learn or discovery along the way.</p>

<p>I hope you enjoy the ride.</p>

<p>&mdash;T</p>
]]></content>
  </entry>
  
</feed>
